
trigger:
- master

parameters:
- name: azureSubscription
  type: string
  default: 'Visual Studio Enterprise Subscription (131ca349-8b25-4fcd-b47d-2aca58898f7c)'
- name: testWebAppName
  type: string
  default: 'node-qa'
- name: prodWebAppName
  type: string
  default: 'agba-devops-cruise'
# - name: appType
#   type: string
#   default: 'webAppLinux'
- name: poolName
  type: string
  default: 'SelfHostedCruise'


variables:
- group: myvariable-group
# - name: PORT
#   value: 3001

stages:
- stage: Build
  displayName: 'Build stage'
  pool:
    name: '${{ parameters.poolName }}'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - script: echo "##vso[task.setvariable variable=PORT]$(PORT)"
      displayName: 'Set port variable'

    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm install --save-dev nyc
        npm install --save-dev mocha-junit-reporter
      displayName: 'npm install and install dev dependencies'

    - script: |
        npx nyc npm test
      displayName: 'npm test with coverage'

    - script: |
        rm -f $(System.DefaultWorkingDirectory)/*.zip
      displayName: 'Cleanup old .zip files'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts: drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Test
  displayName: 'Test stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Test
    displayName: 'Test'
    pool:
      name: '${{ parameters.poolName }}'
    environment: 'Testing'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '${{ parameters.azureSubscription }}'
              appType: 'webAppLinux'
              WebAppName: '${{ parameters.testWebAppName }}'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: Production
  displayName: 'Production stage'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  jobs:
  - deployment:  Production
    displayName: 'Production'
    pool:
      name: '${{ parameters.poolName }}'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '${{ parameters.azureSubscription }}'
              appType: 'webAppLinux'
              WebAppName: '${{ parameters.prodWebAppName }}'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
             
